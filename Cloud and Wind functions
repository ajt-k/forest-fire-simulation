import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib import  animation

from perlin_numpy import (
    generate_perlin_noise_2d, generate_fractal_noise_2d
)


def circle(r,p,q,cloud_map):
    size = 256
    for x in range(0,size):
        for y in range(0,size):
            if r**2>=(abs(x-p)**2)+(abs(y-q))**2:
                cloud_map[x,y] = 1
            
           
           # if r**2>=(abs(x-p)**2)/2+(abs(y-q))**2>(r-(r/8))**2:
           #     cloud_map[x,y] = 0.65
           # if (r-(r/8))**2>(abs(x-p)**2)/2+(abs(y-q))**2>(r-(r/3)):
           #     cloud_map[x,y] = 0.85
           # if (r-(r/3))**2>(abs(x-p)**2)/2+(abs(y-q))**2:
           #     cloud_map[x,y] = 0.98
    return cloud_map




def breeze(n,ang,mag,cloud_map):
    lst = []
    pst = []
    for x in range(2,254):
        for y in range(2,254):
            if cloud_map[x,y] > 0:
                lst.append((x,y))
                
    for x,y in lst:
        p = round(n*np.cos(ang[x,y]))+x
        q = round(n*np.sin(ang[x,y]))+y
        pst.append((p,q))
        cloud_map[p,q] = cloud_map[x,y]
        if pst.count((x,y))<1:
            cloud_map[x,y] = 0
       
           
            
    print(len(lst))
    return cloud_map






def update(mag_map,aworking_map):
    
    working_map_1 = generate_perlin_noise_2d((256,256),(4,4),(True,True))
    #working_map_2 = generate_perlin_noise_2d((256,256),(4,4),(True,True))
    for x in range(0,256):
        for y in range(0,256):
            working_map_1+=1
            mag[x,y] = 1.17*(1/6*working_map_1[x,y]+5/6*mag[x,y])
           
            
    return mag,ang
    
def animate(i):
    

    update(mag,working_map_1)
    breeze(2,ang,mag,cloud_map)
    MATRIX.set_array(cloud_map)
    
    return cloud_map,mag

fig, ax = plt.subplots()

SIZE = 256

SEED = np.random.randint(0,1000)
np.random.seed(SEED)
print('Seed:',SEED)

colors1 = plt.cm.Greens(np.linspace(0., 1, 128))
colors2 = plt.cm.Blues(np.linspace(0, 1, 128))

# combine them and build a new colormap
colors = np.vstack((colors1, colors2))
cmap = mcolors.LinearSegmentedColormap.from_list('my_colormap', colors)



cloud_map = np.zeros((256,256))
circle(20,128,128,cloud_map)
#circle(15,15,128,cloud_map)
mag = generate_perlin_noise_2d((256,256),(2,2),(True,True))
ang = generate_perlin_noise_2d((256,256),(2,2),(True,True))
#ang = np.zeros((256,256))
for x in range(0,256):
    for y in range(0,256):
       # ang[x,y] = ang[x,y]*np.pi
        ang[x,y] = -1
        mag[x,y] +=1
        
working_map_1= np.zeros((256,256))
working_map_2= np.zeros((256,256))
MATRIX = ax.matshow(cloud_map,cmap = cmap,vmin = 0,vmax = 1)

    


ani = animation.FuncAnimation(fig, animate, frames=20000, interval=200)

plt.show()

